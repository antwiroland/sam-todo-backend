AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless To-Do Application - Fixed CORS & Ready to Deploy

Globals:
  Function:
    Runtime: python3.13
    Timeout: 30
    MemorySize: 256

Resources:

  # -----------------------------
  # Cognito User Pool
  # -----------------------------
  TodoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: TodoUserPool
      AutoVerifiedAttributes: [email]
      UsernameAttributes: [email]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
      LambdaConfig:
        PostConfirmation: !GetAtt PostConfirmationFunction.Arn

  TodoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref TodoUserPool
      ClientName: TodoAppClient
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders: ["COGNITO"]

  # -----------------------------
  # DynamoDB Table
  # -----------------------------
  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TodoTasks
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: TaskId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: TaskId
          KeyType: RANGE
      SSESpecification:
        SSEEnabled: true

  # -----------------------------
  # SNS Topic
  # -----------------------------
  TaskExpiryTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TodoTaskExpiryNotifications

  # -----------------------------
  # API Gateway
  # -----------------------------
  TodoApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
        AllowOrigin: "'https://main.d8nrjjr8w3276.amplifyapp.com'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt TodoUserPool.Arn

  # -----------------------------
  # Todo API Lambda
  # -----------------------------
  TodoApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TodoApiHandler
      CodeUri: lambdas/todo/
      Handler: app.lambda_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTable
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTable
      Events:
        # Single OPTIONS method for /tasks (handles all HTTP methods)
        TasksOptions:
          Type: Api
          Properties:
            Path: /tasks
            Method: options
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: NONE
        GetTasks:
          Type: Api
          Properties:
            Path: /tasks
            Method: get
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: CognitoAuthorizer
        AddTask:
          Type: Api
          Properties:
            Path: /tasks
            Method: post
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateTask:
          Type: Api
          Properties:
            Path: /tasks
            Method: put
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteTask:
          Type: Api
          Properties:
            Path: /tasks
            Method: delete
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: CognitoAuthorizer

  # -----------------------------
  # Auth Lambda for login/register/confirm
  # -----------------------------
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TodoAuthHandler
      CodeUri: lambdas/auth/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          CLIENT_ID: !Ref TodoUserPoolClient
      Events:
        # Explicit OPTIONS methods for CORS preflight
        AuthOptions:
          Type: Api
          Properties:
            Path: /auth
            Method: options
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: NONE
        Auth:
          Type: Api
          Properties:
            Path: /auth
            Method: post
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: NONE
        RegisterOptions:
          Type: Api
          Properties:
            Path: /register
            Method: options
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: NONE
        Register:
          Type: Api
          Properties:
            Path: /register
            Method: post
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: NONE
        ConfirmOptions:
          Type: Api
          Properties:
            Path: /confirm
            Method: options
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: NONE
        Confirm:
          Type: Api
          Properties:
            Path: /confirm
            Method: post
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: NONE

  # -----------------------------
  # PostConfirmation Lambda
  # -----------------------------
  PostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TodoPostConfirmationHandler
      CodeUri: lambdas/post_confirmation/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - sns:Subscribe
                - sns:ListSubscriptionsByTopic
                - sns:Publish
              Resource: !Ref TaskExpiryTopic
      Environment:
        Variables:
          TOPIC_ARN: !Ref TaskExpiryTopic

  PostConfirmationInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PostConfirmationFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt TodoUserPool.Arn

  # -----------------------------
  # Scheduled Lambda to check expired tasks
  # -----------------------------
  CheckExpiredTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CheckExpiredTasks
      Handler: app.lambda_handler
      Runtime: python3.13
      CodeUri: lambdas/check_expired_tasks/
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: !Ref TodoTable
        - SNSPublishMessagePolicy:
            TopicName: !Ref TaskExpiryTopic
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTable
          TOPIC_ARN: !Ref TaskExpiryTopic
      Events:
        ScheduledCheck:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint for the To-Do app"
    Value: !Sub "https://${TodoApi}.execute-api.${AWS::Region}.amazonaws.com/dev"

  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref TodoUserPool

  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref TodoUserPoolClient

  TasksTableName:
    Description: "DynamoDB Tasks Table"
    Value: !Ref TodoTable

  SnsTopicArn:
    Description: "SNS Topic ARN for task expiry notifications"
    Value: !Ref TaskExpiryTopic